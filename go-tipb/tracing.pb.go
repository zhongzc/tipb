// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tracing.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TracingEvent int32

const (
	TracingEvent_Unknown            TracingEvent = 0
	TracingEvent_TiKvGrpcio         TracingEvent = 500
	TracingEvent_TiKvSnapshot       TracingEvent = 501
	TracingEvent_TiKvTlsEngine      TracingEvent = 502
	TracingEvent_TiKvCollectMetrics TracingEvent = 503
	// Coprocessor
	TracingEvent_TiKvCoprocessor       TracingEvent = 1000
	TracingEvent_TiKvCoprScheduleTask  TracingEvent = 1001
	TracingEvent_TiKvCoprParseRequest  TracingEvent = 1002
	TracingEvent_TiKvCoprGetSnapshot   TracingEvent = 1003
	TracingEvent_TiKvCoprHandleRequest TracingEvent = 1004
	// RawGet
	TracingEvent_TiKvRawGet         TracingEvent = 1100
	TracingEvent_TiKvRawGetTask     TracingEvent = 1101
	TracingEvent_TiKvRawGetKeyValue TracingEvent = 1102
	// Async_write
	TracingEvent_TiKvScheduleWriteTask                TracingEvent = 1200
	TracingEvent_TiKvEngineRunner                     TracingEvent = 1201
	TracingEvent_TiKvRawDelete                        TracingEvent = 1202
	TracingEvent_TiKvEngineDelete                     TracingEvent = 1203
	TracingEvent_TiKvRawPut                           TracingEvent = 1204
	TracingEvent_TiKvEnginePut                        TracingEvent = 1205
	TracingEvent_TiKvRawDeleteRange                   TracingEvent = 1206
	TracingEvent_TiKvEngineDeleteRange                TracingEvent = 1207
	TracingEvent_TiKvRaftKvAsyncWrite                 TracingEvent = 1208
	TracingEvent_TiKvRaftKvExecWriteRequests          TracingEvent = 1209
	TracingEvent_TiKvRaftKvExecWriteRequestsCallback  TracingEvent = 1216
	TracingEvent_TiKvRaftStoreOnWriteResult           TracingEvent = 1210
	TracingEvent_TiKvRaftStoreFsmPeerHandleMsg        TracingEvent = 1211
	TracingEvent_TiKvRaftStoreSendCommandTxnExtra     TracingEvent = 1212
	TracingEvent_TiKvRaftStoreRaftCommand             TracingEvent = 1213
	TracingEvent_TiKvRaftStoreProposeBatchRaftCommand TracingEvent = 1214
	TracingEvent_TiKvRaftStoreProposeRaftCommand      TracingEvent = 1215
)

var TracingEvent_name = map[int32]string{
	0:    "Unknown",
	500:  "TiKvGrpcio",
	501:  "TiKvSnapshot",
	502:  "TiKvTlsEngine",
	503:  "TiKvCollectMetrics",
	1000: "TiKvCoprocessor",
	1001: "TiKvCoprScheduleTask",
	1002: "TiKvCoprParseRequest",
	1003: "TiKvCoprGetSnapshot",
	1004: "TiKvCoprHandleRequest",
	1100: "TiKvRawGet",
	1101: "TiKvRawGetTask",
	1102: "TiKvRawGetKeyValue",
	1200: "TiKvScheduleWriteTask",
	1201: "TiKvEngineRunner",
	1202: "TiKvRawDelete",
	1203: "TiKvEngineDelete",
	1204: "TiKvRawPut",
	1205: "TiKvEnginePut",
	1206: "TiKvRawDeleteRange",
	1207: "TiKvEngineDeleteRange",
	1208: "TiKvRaftKvAsyncWrite",
	1209: "TiKvRaftKvExecWriteRequests",
	1216: "TiKvRaftKvExecWriteRequestsCallback",
	1210: "TiKvRaftStoreOnWriteResult",
	1211: "TiKvRaftStoreFsmPeerHandleMsg",
	1212: "TiKvRaftStoreSendCommandTxnExtra",
	1213: "TiKvRaftStoreRaftCommand",
	1214: "TiKvRaftStoreProposeBatchRaftCommand",
	1215: "TiKvRaftStoreProposeRaftCommand",
}
var TracingEvent_value = map[string]int32{
	"Unknown":                              0,
	"TiKvGrpcio":                           500,
	"TiKvSnapshot":                         501,
	"TiKvTlsEngine":                        502,
	"TiKvCollectMetrics":                   503,
	"TiKvCoprocessor":                      1000,
	"TiKvCoprScheduleTask":                 1001,
	"TiKvCoprParseRequest":                 1002,
	"TiKvCoprGetSnapshot":                  1003,
	"TiKvCoprHandleRequest":                1004,
	"TiKvRawGet":                           1100,
	"TiKvRawGetTask":                       1101,
	"TiKvRawGetKeyValue":                   1102,
	"TiKvScheduleWriteTask":                1200,
	"TiKvEngineRunner":                     1201,
	"TiKvRawDelete":                        1202,
	"TiKvEngineDelete":                     1203,
	"TiKvRawPut":                           1204,
	"TiKvEnginePut":                        1205,
	"TiKvRawDeleteRange":                   1206,
	"TiKvEngineDeleteRange":                1207,
	"TiKvRaftKvAsyncWrite":                 1208,
	"TiKvRaftKvExecWriteRequests":          1209,
	"TiKvRaftKvExecWriteRequestsCallback":  1216,
	"TiKvRaftStoreOnWriteResult":           1210,
	"TiKvRaftStoreFsmPeerHandleMsg":        1211,
	"TiKvRaftStoreSendCommandTxnExtra":     1212,
	"TiKvRaftStoreRaftCommand":             1213,
	"TiKvRaftStoreProposeBatchRaftCommand": 1214,
	"TiKvRaftStoreProposeRaftCommand":      1215,
}

func (x TracingEvent) Enum() *TracingEvent {
	p := new(TracingEvent)
	*p = x
	return p
}
func (x TracingEvent) String() string {
	return proto.EnumName(TracingEvent_name, int32(x))
}
func (x *TracingEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TracingEvent_value, data, "TracingEvent")
	if err != nil {
		return err
	}
	*x = TracingEvent(value)
	return nil
}
func (TracingEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptorTracing, []int{0} }

type TracingProperty_Key int32

const (
	TracingProperty_Unknown TracingProperty_Key = 0
	TracingProperty_Foo     TracingProperty_Key = 1000
)

var TracingProperty_Key_name = map[int32]string{
	0:    "Unknown",
	1000: "Foo",
}
var TracingProperty_Key_value = map[string]int32{
	"Unknown": 0,
	"Foo":     1000,
}

func (x TracingProperty_Key) Enum() *TracingProperty_Key {
	p := new(TracingProperty_Key)
	*p = x
	return p
}
func (x TracingProperty_Key) String() string {
	return proto.EnumName(TracingProperty_Key_name, int32(x))
}
func (x *TracingProperty_Key) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TracingProperty_Key_value, data, "TracingProperty_Key")
	if err != nil {
		return err
	}
	*x = TracingProperty_Key(value)
	return nil
}
func (TracingProperty_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTracing, []int{0, 0}
}

type TracingProperty struct {
	Key              *TracingProperty_Key `protobuf:"varint,1,req,name=key,enum=tipb.TracingProperty_Key" json:"key,omitempty"`
	Value            *string              `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *TracingProperty) Reset()                    { *m = TracingProperty{} }
func (m *TracingProperty) String() string            { return proto.CompactTextString(m) }
func (*TracingProperty) ProtoMessage()               {}
func (*TracingProperty) Descriptor() ([]byte, []int) { return fileDescriptorTracing, []int{0} }

func (m *TracingProperty) GetKey() TracingProperty_Key {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return TracingProperty_Unknown
}

func (m *TracingProperty) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*TracingProperty)(nil), "tipb.TracingProperty")
	proto.RegisterEnum("tipb.TracingEvent", TracingEvent_name, TracingEvent_value)
	proto.RegisterEnum("tipb.TracingProperty_Key", TracingProperty_Key_name, TracingProperty_Key_value)
}
func (m *TracingProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingProperty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTracing(dAtA, i, uint64(*m.Key))
	}
	if m.Value == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracing(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTracing(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TracingProperty) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		n += 1 + sovTracing(uint64(*m.Key))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTracing(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTracing(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTracing(x uint64) (n int) {
	return sovTracing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TracingProperty) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v TracingProperty_Key
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TracingProperty_Key(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTracing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTracing
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTracing
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTracing(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTracing = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracing   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tracing.proto", fileDescriptorTracing) }

var fileDescriptorTracing = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x9b, 0x1a, 0x48, 0xe6, 0xd0, 0xcb, 0x30, 0x4d, 0x45, 0x5a, 0x68, 0x1a, 0x95, 0x22,
	0xb5, 0x20, 0x05, 0x89, 0x37, 0xa0, 0x25, 0x2d, 0x52, 0x54, 0x11, 0x39, 0x01, 0xd6, 0x53, 0xe7,
	0xe0, 0x5a, 0x71, 0x66, 0xcc, 0xcc, 0x24, 0xad, 0xdf, 0x84, 0x47, 0x60, 0xc9, 0xfd, 0x7e, 0x5b,
	0xb2, 0x00, 0xc4, 0x23, 0xa0, 0xb2, 0x29, 0x97, 0x25, 0x97, 0x2d, 0x72, 0x6c, 0xb7, 0x71, 0x85,
	0xd8, 0x4d, 0xfe, 0xff, 0x3b, 0x27, 0xff, 0xfc, 0xd6, 0xc0, 0xb8, 0x51, 0xdc, 0xf1, 0x84, 0x5b,
	0x0d, 0x94, 0x34, 0x92, 0x1d, 0x31, 0x5e, 0xb0, 0x39, 0x5b, 0x74, 0xa5, 0x2b, 0x07, 0xc2, 0x85,
	0xe8, 0x14, 0x7b, 0x0b, 0x0a, 0x26, 0x5b, 0x31, 0xdc, 0x50, 0x32, 0x40, 0x65, 0x42, 0x76, 0x1e,
	0xac, 0x0e, 0x86, 0xa5, 0x5c, 0x65, 0x74, 0x69, 0xe2, 0xe2, 0x4c, 0x35, 0x1a, 0xae, 0x1e, 0x62,
	0xaa, 0x75, 0x0c, 0xed, 0x88, 0x62, 0x45, 0x38, 0xda, 0xe7, 0x7e, 0x0f, 0x4b, 0xa3, 0x95, 0xd1,
	0x25, 0x62, 0xc7, 0x3f, 0x16, 0x4e, 0x83, 0x55, 0xc7, 0x90, 0x1d, 0x87, 0xfc, 0x35, 0xd1, 0x11,
	0x72, 0x5b, 0xd0, 0x11, 0x56, 0x00, 0x6b, 0x4d, 0x4a, 0xba, 0x97, 0x3f, 0x77, 0xe7, 0x18, 0x8c,
	0x25, 0x0b, 0x6b, 0x7d, 0x14, 0x26, 0xcb, 0x4d, 0x02, 0xb4, 0xbc, 0x7a, 0x7f, 0x5d, 0x05, 0x8e,
	0x27, 0xe9, 0x4f, 0x8b, 0x9d, 0x80, 0xb1, 0x48, 0x68, 0x0a, 0x1e, 0xe8, 0x2d, 0x69, 0xe8, 0x2f,
	0x8b, 0x31, 0x18, 0x8f, 0xa4, 0x96, 0xaf, 0x6b, 0xc2, 0xf5, 0x04, 0xd2, 0xdf, 0x16, 0x3b, 0x09,
	0x2c, 0xd2, 0x56, 0xa5, 0xef, 0xa3, 0x63, 0x36, 0xd0, 0x28, 0xcf, 0xd1, 0xf4, 0x8f, 0xc5, 0x8a,
	0x30, 0x19, 0x1b, 0x81, 0x92, 0x0e, 0x6a, 0x2d, 0x15, 0xdd, 0xcb, 0xb3, 0x19, 0x28, 0xa6, 0x6a,
	0xd3, 0xd9, 0xc2, 0x76, 0xcf, 0xc7, 0x16, 0xd7, 0x1d, 0xfa, 0x35, 0x63, 0x35, 0xb8, 0xd2, 0x68,
	0xe3, 0xad, 0x1e, 0x6a, 0x43, 0xbf, 0xe5, 0x59, 0x09, 0xa6, 0x52, 0x6b, 0x1d, 0xcd, 0x7e, 0xa4,
	0xef, 0x79, 0x36, 0x0b, 0xd3, 0xa9, 0x73, 0x85, 0x8b, 0xb6, 0xbf, 0x3f, 0xf5, 0x23, 0x9f, 0x5e,
	0xc9, 0xe6, 0xdb, 0xeb, 0x68, 0xe8, 0xfb, 0x02, 0x9b, 0x82, 0x89, 0x03, 0x61, 0xf0, 0xb7, 0x1f,
	0x0a, 0xe9, 0x05, 0x62, 0xb1, 0x8e, 0xe1, 0xf5, 0xa8, 0x4a, 0xfa, 0xb1, 0x90, 0xae, 0x4e, 0x63,
	0xde, 0x50, 0x9e, 0x89, 0xb3, 0xde, 0x25, 0x6c, 0x1a, 0x68, 0xe4, 0xc5, 0x35, 0xd8, 0x3d, 0x21,
	0x50, 0xd1, 0x7b, 0x24, 0x2d, 0xc8, 0xe6, 0xdb, 0x97, 0xd1, 0x47, 0x83, 0xf4, 0xfe, 0x21, 0x34,
	0x91, 0x1f, 0x90, 0xa1, 0x70, 0x8d, 0x9e, 0xa1, 0x0f, 0xf7, 0x67, 0x63, 0x2e, 0xd2, 0x1e, 0x91,
	0xa1, 0x6c, 0xf1, 0xa0, 0xcd, 0x85, 0x8b, 0xf4, 0x31, 0x49, 0xb3, 0x0d, 0x2f, 0x8d, 0xbd, 0x27,
	0x24, 0xed, 0xd1, 0xe6, 0x37, 0x4d, 0xbd, 0x7f, 0x49, 0x87, 0xc2, 0x19, 0x44, 0xa7, 0x4f, 0x09,
	0xab, 0xc0, 0xa9, 0x03, 0xab, 0xb6, 0x83, 0xb1, 0x93, 0x54, 0xa6, 0xe9, 0x33, 0xc2, 0x96, 0xe0,
	0xcc, 0x7f, 0x88, 0x55, 0xee, 0xfb, 0x9b, 0xdc, 0xe9, 0xd0, 0xb7, 0x84, 0xcd, 0xc3, 0x6c, 0x4a,
	0x36, 0x8d, 0x54, 0x78, 0x55, 0x24, 0xa8, 0xee, 0xf9, 0x86, 0x3e, 0x27, 0x6c, 0x01, 0xe6, 0x32,
	0xc0, 0x9a, 0xee, 0x36, 0x10, 0x93, 0xcf, 0xb4, 0xa1, 0x5d, 0xfa, 0x82, 0xb0, 0xb3, 0x50, 0xc9,
	0x30, 0x4d, 0x14, 0xed, 0x55, 0xd9, 0xed, 0x72, 0xd1, 0x6e, 0xed, 0x88, 0xda, 0x8e, 0x51, 0x9c,
	0xbe, 0x24, 0x6c, 0x0e, 0x4a, 0x19, 0x2c, 0x3a, 0x24, 0x18, 0x7d, 0x45, 0xd8, 0x32, 0x2c, 0x66,
	0xec, 0xe8, 0xbd, 0x48, 0x8d, 0x2b, 0xdc, 0x38, 0x5b, 0xc3, 0xe8, 0x6b, 0xc2, 0x16, 0x61, 0xfe,
	0x5f, 0xe8, 0x30, 0xf5, 0x86, 0xac, 0x2c, 0xbf, 0xdb, 0x2d, 0xe7, 0x3e, 0xed, 0x96, 0x73, 0x9f,
	0x77, 0xcb, 0xb9, 0xdb, 0x5f, 0xca, 0x23, 0x30, 0xed, 0xc8, 0x6e, 0x35, 0xf0, 0x84, 0xeb, 0xf0,
	0xa0, 0x6a, 0xbc, 0xf6, 0xe6, 0xe0, 0x81, 0x36, 0x72, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x87,
	0x94, 0xfa, 0x32, 0xf5, 0x03, 0x00, 0x00,
}
